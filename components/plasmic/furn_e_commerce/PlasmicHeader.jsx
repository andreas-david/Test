// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: eetRVbLy8gp7SoVBTaw9Ti
// Component: DCbVgJMF2s3
import * as React from "react";
import Link from "next/link";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import MenuButton from "../../MenuButton"; // plasmic-import: Z8OAY1CwyEiE/component
import LinkButton from "../../LinkButton"; // plasmic-import: z79hjkikzT8x/component
import IconLink from "../../IconLink"; // plasmic-import: zsIpI9LvnDtY/component
import { useScreenVariants as useScreenVariantscsw71UGhxUHg } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: CSW71UGhxUHg/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import * as projectcss from "./plasmic_furn_e_commerce.module.css"; // plasmic-import: eetRVbLy8gp7SoVBTaw9Ti/projectcss
import * as sty from "./PlasmicHeader.module.css"; // plasmic-import: DCbVgJMF2s3/css
import SearchIcon from "./icons/PlasmicIcon__Search"; // plasmic-import: EIPRgEHVfzwb/icon
import CogIcon from "./icons/PlasmicIcon__Cog"; // plasmic-import: g3fvinH6OrJN/icon
import ShoppingCartIcon from "./icons/PlasmicIcon__ShoppingCart"; // plasmic-import: D8ik-_5Zn8E0/icon

export const PlasmicHeader__VariantProps = new Array("expanded");

export const PlasmicHeader__ArgProps = new Array();

function PlasmicHeader__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantscsw71UGhxUHg()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root, {
        [sty.root__expanded]: hasVariant(variants, "expanded", "expanded")
      })}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__mCpeE)}
      >
        {(hasVariant(globalVariants, "screen", "mobile") ? true : true) ? (
          <MenuButton
            data-plasmic-name={"menuButton"}
            data-plasmic-override={overrides.menuButton}
            className={classNames("__wab_instance", sty.menuButton, {
              [sty.menuButton__expanded]: hasVariant(
                variants,
                "expanded",
                "expanded"
              )
            })}
            expanded={
              hasVariant(variants, "expanded", "expanded") &&
              hasVariant(globalVariants, "screen", "mobile")
                ? "expanded"
                : undefined
            }
          />
        ) : null}

        <p.PlasmicLink
          data-plasmic-name={"link"}
          data-plasmic-override={overrides.link}
          className={classNames(projectcss.a, sty.link)}
          component={Link}
          href={"/"}
          platform={"nextjs"}
        >
          <p.PlasmicImg
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img)}
            displayHeight={"auto"}
            displayMaxHeight={"none"}
            displayMaxWidth={"none"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"100%"}
            src={{
              src: "/plasmic/furn_e_commerce/images/plasmic.png",
              fullWidth: 3216,
              fullHeight: 624,
              aspectRatio: undefined
            }}
          />
        </p.PlasmicLink>

        {(
          hasVariant(variants, "expanded", "expanded") &&
          hasVariant(globalVariants, "screen", "mobile")
            ? true
            : hasVariant(globalVariants, "screen", "mobile")
            ? true
            : true
        ) ? (
          <div
            className={classNames(projectcss.all, sty.freeBox___8TdBn, {
              [sty.freeBox__expanded___8TdBNbq2Sz]: hasVariant(
                variants,
                "expanded",
                "expanded"
              )
            })}
          >
            <LinkButton
              className={classNames("__wab_instance", sty.linkButton__e2E)}
              href={"/#home"}
              size={"small"}
              text={"Home"}
              type={"blankGray"}
            />

            <LinkButton
              className={classNames("__wab_instance", sty.linkButton__irYl4)}
              href={"/#new-arrival"}
              size={"small"}
              text={"New Arrival"}
              type={"blankGray"}
            />

            <LinkButton
              className={classNames("__wab_instance", sty.linkButton__fawxa)}
              href={"/#features"}
              size={"small"}
              text={"Features"}
              type={"blankGray"}
            />

            <LinkButton
              className={classNames("__wab_instance", sty.linkButton__rmZ5K)}
              href={"/#blog"}
              size={"small"}
              text={"Blog"}
              type={"blankGray"}
            />

            <LinkButton
              className={classNames("__wab_instance", sty.linkButton__mOMhP)}
              href={"/#contact"}
              size={"small"}
              text={"Contact"}
              type={"blankGray"}
            />
          </div>
        ) : null}

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__o9Ipz)}
        >
          <IconLink
            className={classNames("__wab_instance", sty.iconLink__qdOgS)}
            icon={
              <SearchIcon
                className={classNames(projectcss.all, sty.svg___1JIau)}
                role={"img"}
              />
            }
          />

          <IconLink
            className={classNames("__wab_instance", sty.iconLink__vUpB)}
            icon={
              <CogIcon
                className={classNames(projectcss.all, sty.svg__xieNz)}
                role={"img"}
              />
            }
          />

          <IconLink
            className={classNames("__wab_instance", sty.iconLink__dsqm7)}
            icon={
              <ShoppingCartIcon
                className={classNames(projectcss.all, sty.svg__xWWe2)}
                role={"img"}
              />
            }
          />
        </p.Stack>
      </p.Stack>

      {(
        hasVariant(variants, "expanded", "expanded") &&
        hasVariant(globalVariants, "screen", "mobile")
          ? true
          : true
      ) ? (
        <div
          className={classNames(projectcss.all, sty.freeBox__i5Iek, {
            [sty.freeBox__expanded__i5Iekbq2Sz]: hasVariant(
              variants,
              "expanded",
              "expanded"
            )
          })}
        >
          <LinkButton
            className={classNames("__wab_instance", sty.linkButton___54Wco)}
            text={"Home"}
            type={"blankGray"}
          />

          <LinkButton
            className={classNames("__wab_instance", sty.linkButton__oEgW9)}
            text={"New Arrival"}
            type={"blankGray"}
          />

          <LinkButton
            className={classNames("__wab_instance", sty.linkButton__pteBn)}
            text={"Features"}
            type={"blankGray"}
          />

          <LinkButton
            className={classNames("__wab_instance", sty.linkButton__azPct)}
            text={"Blog"}
            type={"blankGray"}
          />

          <LinkButton
            className={classNames("__wab_instance", sty.linkButton___4Sea)}
            text={"Contact"}
            type={"blankGray"}
          />
        </div>
      ) : null}
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "menuButton", "link", "img"],
  menuButton: ["menuButton"],
  link: ["link", "img"],
  img: ["img"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHeader__ArgProps,
      internalVariantPropNames: PlasmicHeader__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicHeader__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHeader";
  } else {
    func.displayName = `PlasmicHeader.${nodeName}`;
  }
  return func;
}

export const PlasmicHeader = Object.assign(
  // Top-level PlasmicHeader renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    menuButton: makeNodeComponent("menuButton"),
    link: makeNodeComponent("link"),
    img: makeNodeComponent("img"),
    // Metadata about props expected for PlasmicHeader
    internalVariantProps: PlasmicHeader__VariantProps,
    internalArgProps: PlasmicHeader__ArgProps
  }
);

export default PlasmicHeader;
/* prettier-ignore-end */
